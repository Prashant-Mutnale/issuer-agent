import { HexString } from '@polkadot/util/types.js';
import type { ISchema } from './Schema.js';
import type { DidUri } from './DidDocument';
import type { IContents } from './Content.js';
export declare const REGISTRY_IDENT: number;
export declare const REGISTRY_PREFIX: string;
export interface IRegistryMetaData {
    digest: HexString;
    schema: ISchema['$id'];
    creator: DidUri;
    active: boolean;
}
export interface IRegistryType {
    details: IContents;
    schema: ISchema['$id'];
    creator: DidUri;
}
export interface IRegistry {
    identifier: string;
    details: string;
    meta: IRegistryMetaData;
}
export interface IRegistryDetails {
    identifier: IRegistry['identifier'];
    details: IRegistry['details'];
    meta: IRegistry['meta'];
}
export declare const Permission: {
    readonly ASSERT: number;
    readonly ADMIN: number;
};
export type PermissionType = (typeof Permission)[keyof typeof Permission];
export interface IRegistryAuthorization {
    identifier: IRegistry['identifier'];
    delegate: DidUri;
    schema: ISchema['$id'] | null;
}
export interface IRegistryAuthorizationDetails {
    identifier: IRegistry['identifier'];
    delegate: DidUri;
    schema: ISchema['$id'] | null;
    permissions: PermissionType[];
}

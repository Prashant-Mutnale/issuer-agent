"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPresentation = exports.getHash = exports.isPresentation = exports.isICredential = exports.verifyPresentation = exports.verifyCredential = exports.fromContent = exports.verifySignature = exports.verifyAgainstSchema = exports.verifyDataStructure = exports.verifyDataIntegrity = exports.verifyRootHash = exports.makeSigningData = exports.removeContentProperties = exports.calculateRootHash = void 0;
const tslib_1 = require("tslib");
const did_1 = require("@cord.network/did");
const utils_1 = require("@cord.network/utils");
const Content = tslib_1.__importStar(require("../content/index.js"));
const index_js_1 = require("../content/index.js");
const Schema_js_1 = require("../schema/Schema.js");
const types_1 = require("@cord.network/types");
const utils_2 = require("@cord.network/utils");
function getHashRoot(leaves) {
    const result = utils_1.Crypto.u8aConcat(...leaves);
    return utils_1.Crypto.hash(result);
}
function getHashLeaves(contentHashes, evidenceIds) {
    const result = contentHashes.map((item) => utils_1.Crypto.coToUInt8(item));
    if (evidenceIds) {
        evidenceIds.forEach((evidence) => {
            result.push(utils_1.Crypto.coToUInt8(evidence.identifier));
        });
    }
    return result;
}
/**
 * Calculates the root hash of the credential.
 *
 * @param credential The credential object.
 * @returns The hash.
 */
function calculateRootHash(credential) {
    const hashes = getHashLeaves(credential.contentHashes || [], credential.evidenceIds || []);
    const root = getHashRoot(hashes);
    return utils_1.Crypto.u8aToHex(root);
}
exports.calculateRootHash = calculateRootHash;
/**
 * Removes [[Content] properties from the [[ContentStream]] object, provides anonymity and security when building the [[createPresentation]] method.
 *
 * @param credential - The credential object to remove properties from.
 * @param properties - Properties to remove from the [[Content]] object.
 * @returns A cloned Stream with removed properties.
 */
function removeContentProperties(credential, properties) {
    const presentation = 
    // clone the credential because properties will be deleted later.
    // TODO: find a nice way to clone stuff
    JSON.parse(JSON.stringify(credential));
    properties.forEach((key) => {
        delete presentation.content.contents[key];
    });
    presentation.contentNonceMap = (0, index_js_1.hashContents)(presentation.content, {
        nonces: presentation.contentNonceMap,
    }).nonceMap;
    return presentation;
}
exports.removeContentProperties = removeContentProperties;
/**
 * Prepares credential data for signing.
 *
 * @param input - The Stream to prepare the data for.
 * @param challenge - An optional challenge to be included in the signing process.
 * @returns The prepared signing data as Uint8Array.
 */
function makeSigningData(input, challenge) {
    return new Uint8Array([
        ...utils_1.Crypto.coToUInt8(input.rootHash),
        ...utils_1.Crypto.coToUInt8(challenge),
    ]);
}
exports.makeSigningData = makeSigningData;
function verifyRootHash(input) {
    if (input.rootHash !== calculateRootHash(input))
        throw new utils_1.SDKErrors.RootHashUnverifiableError();
}
exports.verifyRootHash = verifyRootHash;
/**
 * Verifies the data of the [[ContentStream]] object; used to check that the data was not tampered with, by checking the data against hashes.
 *
 * @param input - The [[Stream]] for which to verify data.
 */
function verifyDataIntegrity(input) {
    // check claim hash
    verifyRootHash(input);
    // verify properties against selective disclosure proof
    Content.verifyDisclosedAttributes(input.content, {
        nonces: input.contentNonceMap,
        hashes: input.contentHashes,
    });
    // check legitimations
    input.evidenceIds.forEach(verifyDataIntegrity);
}
exports.verifyDataIntegrity = verifyDataIntegrity;
/**
 *  Checks whether the input meets all the required criteria of an ICredential object.
 *  Throws on invalid input.
 *
 * @param input - A potentially only partial [[ICredential]].
 *
 */
function verifyDataStructure(input) {
    if (!('content' in input)) {
        throw new utils_1.SDKErrors.ContentMissingError();
    }
    else {
        Content.verifyDataStructure(input.content);
    }
    if (!input.content.holder) {
        throw new utils_1.SDKErrors.HolderMissingError();
    }
    if (!Array.isArray(input.evidenceIds)) {
        throw new utils_1.SDKErrors.EvidenceMissingError();
    }
    if (!('contentNonceMap' in input)) {
        throw new utils_1.SDKErrors.ContentNonceMapMissingError();
    }
    if (typeof input.contentNonceMap !== 'object')
        throw new utils_1.SDKErrors.ContentNonceMapMalformedError();
    Object.entries(input.contentNonceMap).forEach(([digest, nonce]) => {
        utils_1.DataUtils.verifyIsHex(digest, 256);
        if (!digest || typeof nonce !== 'string' || !nonce)
            throw new utils_1.SDKErrors.ContentNonceMapMalformedError();
    });
    if (!('contentHashes' in input)) {
        throw new utils_1.SDKErrors.DataStructureError('content hashes not provided');
    }
}
exports.verifyDataStructure = verifyDataStructure;
/**
 *  Checks the [[Stream]] with a given [[SchemaType]] to check if the claim meets the [[schema]] structure.
 *
 * @param contentStream A [[Stream]] object of an anchored content used for verification.
 * @param schema A [[Schema]] to verify the [[Content]] structure.
 */
function verifyAgainstSchema(credential, schema) {
    verifyDataStructure(credential);
    (0, Schema_js_1.verifyContentAganistSchema)(credential.content.contents, schema);
}
exports.verifyAgainstSchema = verifyAgainstSchema;
/**
 * Verifies the signature of the [[ICredentialPresentation]].
 * the signature over the presentation **must** be generated with the DID in order for the verification to be successful.
 *
 * @param input - The [[IPresentation]].
 * @param verificationOpts Additional verification options.
 * @param verificationOpts.didResolveKey - The function used to resolve the claimer's key. Defaults to [[resolveKey]].
 * @param verificationOpts.challenge - The expected value of the challenge. Verification will fail in case of a mismatch.
 */
async function verifySignature(input, { challenge, didResolveKey = did_1.resolveKey, } = {}) {
    const { holderSignature } = input;
    if (challenge && challenge !== holderSignature.challenge)
        throw new utils_1.SDKErrors.SignatureUnverifiableError('Challenge differs from expected');
    const signingData = makeSigningData(input, holderSignature.challenge);
    await (0, did_1.verifyDidSignature)({
        ...(0, did_1.signatureFromJson)(holderSignature),
        message: signingData,
        // check if credential owner matches signer
        expectedSigner: input.content.holder,
        expectedVerificationMethod: 'authentication',
        didResolveKey,
    });
}
exports.verifySignature = verifySignature;
/**
 * Builds a new  [[ICredential]] object, from a complete set of required parameters.
 *
 * @param content An `IContent` object to build the credential for.
 * @param option Container for different options that can be passed to this method.
 * @param option.evidenceIds Array of [[Credential]] objects the Issuer include as evidenceIds.
 * @param option.link Identifier of the credential this credential is linked to.
 * @param option.space Identifier of the space this credential is linked to.
 * @returns A new [[ICredential]] object.
 */
function fromContent(content, { evidenceIds = [], authorization = null, registry = null } = {}) {
    const { hashes: contentHashes, nonceMap: contentNonceMap } = Content.hashContents(content);
    const rootHash = calculateRootHash({
        evidenceIds,
        contentHashes,
    });
    const credential = {
        content,
        contentHashes,
        contentNonceMap,
        evidenceIds: evidenceIds || [],
        authorization: authorization,
        registry: registry,
        rootHash,
        identifier: utils_2.Identifier.hashToUri(rootHash, types_1.STREAM_IDENTIFIER, types_1.STREAM_PREFIX),
    };
    verifyDataStructure(credential);
    return credential;
}
exports.fromContent = fromContent;
/**
 * Verifies data structure & data integrity of a credential object.
 *
 * @param credential - The object to check.
 * @param options - Additional parameter for more verification steps.
 * @param options.schema - Schema to be checked against.
 */
async function verifyCredential(credential, { schema } = {}) {
    verifyDataStructure(credential);
    verifyDataIntegrity(credential);
    if (schema) {
        verifyAgainstSchema(credential, schema);
    }
}
exports.verifyCredential = verifyCredential;
/**
 * Verifies data structure, data integrity and the holder's signature of a credential presentation.
 *
 * Upon presentation of a credential, a verifier would call this function.
 *
 * @param presentation - The object to check.
 * @param options - Additional parameter for more verification steps.
 * @param options.schema - Schema which the included claim should be checked against.
 * @param options.challenge -  The expected value of the challenge. Verification will fail in case of a mismatch.
 * @param options.didResolveKey - The function used to resolve the holders's key. Defaults to [[resolveKey]].
 */
async function verifyPresentation(presentation, { schema, challenge, didResolveKey = did_1.resolveKey } = {}) {
    await verifyCredential(presentation, { schema });
    await verifySignature(presentation, {
        challenge,
        didResolveKey,
    });
}
exports.verifyPresentation = verifyPresentation;
/**
 * Type Guard to determine input being of type [[ICredential]].
 *
 * @param input - A potentially only partial [[ICredential]].
 *
 * @returns  Boolean whether input is of type ICredential.
 */
function isICredential(input) {
    try {
        verifyDataStructure(input);
    }
    catch (error) {
        return false;
    }
    return true;
}
exports.isICredential = isICredential;
/**
 * Type Guard to determine input being of type [[ICredentialPresentation]].
 *
 * @param input - An [[ICredential]], [[ICredentialPresentation]], or other object.
 *
 * @returns  Boolean whether input is of type ICredentialPresentation.
 */
function isPresentation(input) {
    return (isICredential(input) &&
        (0, did_1.isDidSignature)(input.holderSignature));
}
exports.isPresentation = isPresentation;
/**
 * Gets the hash of the credential.
 *
 * @param credential - The credential to get the hash from.
 * @returns The hash of the credential.
 */
function getHash(credential) {
    return credential.rootHash;
}
exports.getHash = getHash;
/**
 * Gets names of the credential’s attributes.
 *
 * @param credential The credential.
 * @returns The set of names.
 */
function getAttributes(credential) {
    return new Set(Object.keys(credential.content.contents));
}
/**
 * Creates a public presentation which can be sent to a verifier.
 * This presentation is signed.
 *
 * @param presentationOptions The additional options to use upon presentation generation.
 * @param presentationOptions.credential The credential to create the presentation for.
 * @param presentationOptions.signCallback The callback to sign the presentation.
 * @param presentationOptions.selectedAttributes All properties of the credential which have been requested by the verifier and therefore must be publicly presented.
 * @param presentationOptions.challenge Challenge which will be part of the presentation signature.
 * If not specified, all attributes are shown. If set to an empty array, we hide all attributes inside the claim for the presentation.
 * @returns A deep copy of the Credential with selected attributes.
 */
async function createPresentation({ credential, signCallback, selectedAttributes, challenge, }) {
    // filter attributes that are not in requested attributes
    const excludedClaimProperties = selectedAttributes
        ? Array.from(getAttributes(credential)).filter((property) => !selectedAttributes.includes(property))
        : [];
    // remove these attributes
    const presentation = removeContentProperties(credential, excludedClaimProperties);
    const signature = await signCallback({
        data: makeSigningData(presentation, challenge),
        did: credential.content.holder,
        keyRelationship: 'authentication',
    });
    return {
        ...presentation,
        holderSignature: {
            ...(0, did_1.signatureToJson)(signature),
            ...(challenge && { challenge }),
        },
    };
}
exports.createPresentation = createPresentation;

import type { DidResolveKey, Hash, ICredential, IStream, IContent, ICredentialPresentation, ISchema, SignCallback, IRegistryAuthorization } from '@cord.network/types';
/**
 * Calculates the root hash of the credential.
 *
 * @param credential The credential object.
 * @returns The hash.
 */
export declare function calculateRootHash(credential: Partial<ICredential>): Hash;
/**
 * Removes [[Content] properties from the [[ContentStream]] object, provides anonymity and security when building the [[createPresentation]] method.
 *
 * @param credential - The credential object to remove properties from.
 * @param properties - Properties to remove from the [[Content]] object.
 * @returns A cloned Stream with removed properties.
 */
export declare function removeContentProperties(credential: ICredential, properties: string[]): ICredential;
/**
 * Prepares credential data for signing.
 *
 * @param input - The Stream to prepare the data for.
 * @param challenge - An optional challenge to be included in the signing process.
 * @returns The prepared signing data as Uint8Array.
 */
export declare function makeSigningData(input: ICredential, challenge?: string): Uint8Array;
export declare function verifyRootHash(input: ICredential): void;
/**
 * Verifies the data of the [[ContentStream]] object; used to check that the data was not tampered with, by checking the data against hashes.
 *
 * @param input - The [[Stream]] for which to verify data.
 */
export declare function verifyDataIntegrity(input: ICredential): void;
/**
 *  Checks whether the input meets all the required criteria of an ICredential object.
 *  Throws on invalid input.
 *
 * @param input - A potentially only partial [[ICredential]].
 *
 */
export declare function verifyDataStructure(input: ICredential): void;
/**
 *  Checks the [[Stream]] with a given [[SchemaType]] to check if the claim meets the [[schema]] structure.
 *
 * @param contentStream A [[Stream]] object of an anchored content used for verification.
 * @param schema A [[Schema]] to verify the [[Content]] structure.
 */
export declare function verifyAgainstSchema(credential: ICredential, schema: ISchema): void;
/**
 * Verifies the signature of the [[ICredentialPresentation]].
 * the signature over the presentation **must** be generated with the DID in order for the verification to be successful.
 *
 * @param input - The [[IPresentation]].
 * @param verificationOpts Additional verification options.
 * @param verificationOpts.didResolveKey - The function used to resolve the claimer's key. Defaults to [[resolveKey]].
 * @param verificationOpts.challenge - The expected value of the challenge. Verification will fail in case of a mismatch.
 */
export declare function verifySignature(input: ICredentialPresentation, { challenge, didResolveKey, }?: {
    challenge?: string;
    didResolveKey?: DidResolveKey;
}): Promise<void>;
export type Options = {
    evidenceIds?: ICredential[];
    authorization?: IRegistryAuthorization['identifier'] | null;
    registry?: ICredential['registry'] | null;
};
/**
 * Builds a new  [[ICredential]] object, from a complete set of required parameters.
 *
 * @param content An `IContent` object to build the credential for.
 * @param option Container for different options that can be passed to this method.
 * @param option.evidenceIds Array of [[Credential]] objects the Issuer include as evidenceIds.
 * @param option.link Identifier of the credential this credential is linked to.
 * @param option.space Identifier of the space this credential is linked to.
 * @returns A new [[ICredential]] object.
 */
export declare function fromContent(content: IContent, { evidenceIds, authorization, registry }?: Options): ICredential;
type VerifyOptions = {
    schema?: ISchema;
    challenge?: string;
    didResolveKey?: DidResolveKey;
};
/**
 * Verifies data structure & data integrity of a credential object.
 *
 * @param credential - The object to check.
 * @param options - Additional parameter for more verification steps.
 * @param options.schema - Schema to be checked against.
 */
export declare function verifyCredential(credential: ICredential, { schema }?: VerifyOptions): Promise<void>;
/**
 * Verifies data structure, data integrity and the holder's signature of a credential presentation.
 *
 * Upon presentation of a credential, a verifier would call this function.
 *
 * @param presentation - The object to check.
 * @param options - Additional parameter for more verification steps.
 * @param options.schema - Schema which the included claim should be checked against.
 * @param options.challenge -  The expected value of the challenge. Verification will fail in case of a mismatch.
 * @param options.didResolveKey - The function used to resolve the holders's key. Defaults to [[resolveKey]].
 */
export declare function verifyPresentation(presentation: ICredentialPresentation, { schema, challenge, didResolveKey }?: VerifyOptions): Promise<void>;
/**
 * Type Guard to determine input being of type [[ICredential]].
 *
 * @param input - A potentially only partial [[ICredential]].
 *
 * @returns  Boolean whether input is of type ICredential.
 */
export declare function isICredential(input: unknown): input is ICredential;
/**
 * Type Guard to determine input being of type [[ICredentialPresentation]].
 *
 * @param input - An [[ICredential]], [[ICredentialPresentation]], or other object.
 *
 * @returns  Boolean whether input is of type ICredentialPresentation.
 */
export declare function isPresentation(input: unknown): input is ICredentialPresentation;
/**
 * Gets the hash of the credential.
 *
 * @param credential - The credential to get the hash from.
 * @returns The hash of the credential.
 */
export declare function getHash(credential: ICredential): IStream['streamHash'];
/**
 * Creates a public presentation which can be sent to a verifier.
 * This presentation is signed.
 *
 * @param presentationOptions The additional options to use upon presentation generation.
 * @param presentationOptions.credential The credential to create the presentation for.
 * @param presentationOptions.signCallback The callback to sign the presentation.
 * @param presentationOptions.selectedAttributes All properties of the credential which have been requested by the verifier and therefore must be publicly presented.
 * @param presentationOptions.challenge Challenge which will be part of the presentation signature.
 * If not specified, all attributes are shown. If set to an empty array, we hide all attributes inside the claim for the presentation.
 * @returns A deep copy of the Credential with selected attributes.
 */
export declare function createPresentation({ credential, signCallback, selectedAttributes, challenge, }: {
    credential: ICredential;
    signCallback: SignCallback;
    selectedAttributes?: string[];
    challenge?: string;
}): Promise<ICredentialPresentation>;
export {};

/**
 * Registry.
 *
 * @packageDocumentation
 * @module Registry
 * @preferred
 */
import type { IRegistry, IRegistryType } from '@cord.network/types';
/**
 *  Checks whether the input meets all the required criteria of an [[IRegistry]] object.
 *  Throws on invalid input.
 *
 * @param input The potentially only partial [[IRegistry]].
 *
 */
export declare function verifyRegistryDataStructure(input: IRegistry): void;
/**
   * Creates a new [[Registry]] from an [[IRegistryType]].
 
   *
   * @param space The request from which the [[Registry]] should be generated.
   * @param controller The identity of the [[Registry]] creator.
   * @returns An instance of [[Registry]].
   */
export declare function fromRegistryProperties(registryProps: IRegistryType): IRegistry;
/**
 *  Custom Type Guard to determine input being of type ISpace using the SpaceUtils errorCheck.
 *
 * @param input The potentially only partial ISpace.
 * @returns Boolean whether input is of type ISpace.
 */
export declare function isIRegistry(input: unknown): input is IRegistry;
/**
 * Checks on the CORD blockchain whether a schema is registered.
 *
 * @param schema Schema data.
 */
export declare function verifyStored(registry: IRegistry): Promise<void>;
/**
 * Encodes the provided Schema for use in `api.tx.schema.add()`.
 *
 * @param schema The Schema to write on the blockchain.
 * @returns Encoded Schema.
 */
export declare function toChain(details: IRegistryType): string;
